# ==========================================================================================
# **Application Configuration Properties**
# ------------------------------------------------------------------------------------------
# This file contains configuration properties for the Spring Boot application.
# Properties are used to define application-level settings, such as database configurations,
# logging levels, and additional feature setups.
# ==========================================================================================

# ==========================================================================================
# **Application Name**
# ------------------------------------------------------------------------------------------
spring.application.name=Employee Leave Management System
# Description: The logical name of the application. This value can be used in logs,
# monitoring systems, or documentation to identify the application.

# ==========================================================================================
# **Datasource Configuration (H2 - In-Memory Database)**
# ------------------------------------------------------------------------------------------
# H2 is a lightweight, fast, and in-memory database primarily used for testing and 
# development environments. It does not require a separate database server.
# ==========================================================================================
spring.datasource.url=jdbc:h2:mem:testdb
# Description: The JDBC URL to connect to the H2 in-memory database.
# Format:
#   - `jdbc:h2:mem:<db_name>` → Creates an in-memory database.
#   - `jdbc:h2:file:<path>` → Creates a persistent file-based database.
# Example: jdbc:h2:mem:testdb (In-Memory)

spring.datasource.driver-class-name=org.h2.Driver
# Description: Specifies the JDBC driver class for H2.
# Required for Spring Boot to load the appropriate database driver.

spring.datasource.username=pola
# Description: The default username for H2 is `sa` (System Administrator).

spring.datasource.password=pola
# Description: By default, the H2 database does not require a password (empty).

# ==========================================================================================
# **JPA Configuration**
# ------------------------------------------------------------------------------------------
# Java Persistence API (JPA) settings for Hibernate, the default ORM framework in Spring Boot.
# ==========================================================================================
spring.jpa.hibernate.ddl-auto=create
# Description: Specifies the database schema management strategy.
# Common Values:
#  - `create`  → Drops and recreates the database schema at every startup.
#  - `update`  → Updates the schema without dropping existing data.
#  - `none`    → Disables automatic schema generation.
#  - `validate` → Validates the existing schema without modifying it.
# Recommended:
#  - Use `create` or `update` in development.
#  - Use `none` in production to prevent accidental schema modifications.

# ==========================================================================================
# **H2 Console Configuration**
# ------------------------------------------------------------------------------------------
# The H2 Console is a web-based interface for querying and inspecting the H2 database.
# It is useful during development for debugging and verifying stored data.
# ==========================================================================================
spring.h2.console.enabled=true
# Description: Enables the H2 database web console.

spring.h2.console.path=/h2-console
# Description: Specifies the URL path for accessing the H2 console.
# Example: Access via `http://localhost:8080/h2-console`
# Note: The default username is `sa`, and there is no password.

# ==========================================================================================
# **Logging Configuration**
# ------------------------------------------------------------------------------------------
# Configures the logging level for Hibernate SQL queries and parameter bindings.
# Useful for debugging database interactions.
# ==========================================================================================
logging.level.org.hibernate.SQL=DEBUG
# Description: Logs all SQL queries executed by Hibernate.

logging.level.org.hibernate.orm.jdbc.bind=TRACE
# Description: Logs the parameter bindings used in SQL queries.
# Note: TRACE level logging generates a large volume of logs and should be enabled
# only in development mode.

# ==========================================================================================
# **SpringDoc Configuration for API Documentation (Swagger)**
# ------------------------------------------------------------------------------------------
# These properties enable and configure OpenAPI (Swagger) documentation via SpringDoc.
# ==========================================================================================
springdoc.api-docs.enabled=true
# Description: Enables generation of OpenAPI specification (API documentation).

springdoc.swagger-ui.enabled=true
# Description: Enables the Swagger UI for interactive API documentation.

logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.jdbc=DEBUG

